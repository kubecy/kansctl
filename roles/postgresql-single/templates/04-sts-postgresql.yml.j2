---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: {{ namespace }}
  labels:
    app: postgres
spec:
  serviceName: "postgres"
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      nodeSelector:
        postgresql: "true"
      containers:
        - name: postgres
          image: {{ service.postgresql_single }}
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgresql
                  key: db_admin_user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql
                  key: db_admin_pass
            #- name: POSTGRES_DB
            #  valueFrom:
            #    secretKeyRef:
            #      name: postgresql
            #      key: db_name
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          livenessProbe:
            exec:
              command: ["pg_isready", "-h", "localhost", "-U", "kubecy"]
            initialDelaySeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command: ["pg_isready", "-h", "localhost", "-U", "kubecy"]
            initialDelaySeconds: 5
            timeoutSeconds: 1
          volumeMounts:
            - name: postgresql-data
              mountPath: "/var/lib/postgresql/data"
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 256Mi
      restartPolicy: Always
      priorityClassName: system-node-critical
      volumes:
        - name: postgresql-data
          persistentVolumeClaim:
            claimName: postgresql-data-pvc
