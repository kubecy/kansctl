#!/bin/bash

#############################################################################################################
#                                                                                                           #
# AUTHOR:          kubecy                                                                                   #
# SCRIPT ID:       kansctl                                                                                  #
# FUNCTION:        kansctl 是一款基于 Ansible、Shell 面向 Kubernetes 场景的中间件部署与项目交付自动化工具   #
# CREATE TIME:     2023/11/30                                                                               #
# PLATFORM:        Linux                                                                                    #
#                                                                                                           #
#############################################################################################################
set -o nounset
set -o errexit


SERVICE_DIR="./roles"
ENV_DIR="./moone"
PLAYBOOK_FILE="./playbooks/site.yml"


function logger() {
  TIMESTAMP=$(date +'%Y-%m-%d %H:%M:%S')
  local FID=$(basename "${BASH_SOURCE[1]}")
  local SOURCE="\033[35m[$FID:${BASH_LINENO[0]}]\033[0m"
  case "$1" in
    debug)
      echo -e "\033[35m$TIMESTAMP\033[0m $SOURCE \033[36mDEBUG $2\033[0m"
      ;;
    info)
      echo -e "\033[35m$TIMESTAMP\033[0m $SOURCE \033[32mINFO $2\033[0m"
      ;;
    warn)
      echo -e "\033[35m$TIMESTAMP\033[0m $SOURCE \033[33mWARN $2\033[0m"
      ;;
    error)
      echo -e "\033[35m$TIMESTAMP\033[0m $SOURCE \033[31mERROR $2\033[0m"
      ;;
    *) ;;
  esac
}

function usage() {
    echo -e "\033[33mUsage:\033[0m kansctl command -e <env> -t <service> [args]"
    cat <<EOF
-------------------------------------------------------------------------------------

命令 (command):
  list                               列出当前支持的所有服务（基于 roles 目录）
  apply                              部署指定服务（执行 Ansible 安装）
  delete                             卸载指定服务（执行 Ansible 清理）

选项参数 (options):
  -e <环境>                          指定部署环境，会加载对应的 <环境>.yml 配置文件
  -t <服务>                          指定部署服务，对应 roles 目录下的服务名 (逗号分隔多个服务)

环境 (env):
  prod                               moone 生产环境
  dev                                moone 开发环境
  test                               moone 测试环境

服务 (service):
  redis-single                       Redis      单实例
  postgresql-single                  PostgreSQL 单实例
  mysql-single                       MySQL      单实例
  rabbitmq-single                    RabbitMQ   单实例

示例 (examples):
  ./kansctl list
  ./kansctl apply  -e prod -t redis-single
  ./kansctl delete -e test -t mysql-single
  ./kansctl delete -e prod -t all
  ./kansctl setup tab                在当前用户目录生成 ~/.kansctl_completion.sh

提示 (tip):
  请确保 roles 目录和对应的 <环境>.yml 配置文件已存在，否则部署将失败。

EOF
}

function list() {
    logger info "服务名称:"
    find "$SERVICE_DIR" -mindepth 1 -maxdepth 1 -type d -printf "%f\n" | while read SERVICE; do
      echo "-  $SERVICE"
    done
    
}

function apply() {
    local ENV_NAME="$2"
    local SERVICE_NAME="$4"
    ENV_FILE="${ENV_DIR}/${ENV_NAME}.yml"

    if [[ "$SERVICE_NAME" == "all" ]]; then
        logger info "检测到服务参数为 all，开始批量部署全部服务"
        for service in $(find "$SERVICE_DIR" -mindepth 1 -maxdepth 1 -type d -printf "%f\n"); do
            logger info "开始部署服务：$service"
            logger debug "执行命令: ansible-playbook -e @${ENV_FILE} -t ${service} ${PLAYBOOK_FILE}"
            ansible-playbook -e "@${ENV_FILE}" -t "${service}" "${PLAYBOOK_FILE}"
        done
    else
        logger info "开始部署服务：$SERVICE_NAME"
        logger debug "执行命令: ansible-playbook -e @${ENV_FILE} -t ${SERVICE_NAME} ${PLAYBOOK_FILE}"
        ansible-playbook -e "@${ENV_FILE}" -t "${SERVICE_NAME}" "${PLAYBOOK_FILE}"
    fi
}

function delete() {
    local ENV_NAME="$2"
    local SERVICE_NAME="$4"
    ENV_FILE="${ENV_DIR}/${ENV_NAME}.yml"


    logger warn "即将执行服务卸载操作，请确认!"
    logger debug "将在 3 秒后开始删除 [$ENV_NAME] 环境中的 [$SERVICE_NAME] 服务:"

    for i in {3..1}; do
      echo -ne "\r剩余时间：\033[33m${i}\033[0m 秒，请按 Ctrl+C 取消..."
      sleep 1
    done

    if [[ "$SERVICE_NAME" == "all" ]]; then
        logger info "检测到服务参数为 all，开始批量卸载全部服务"
        for service in $(find "$SERVICE_DIR" -mindepth 1 -maxdepth 1 -type d -printf "%f\n"); do
            logger info "开始卸载服务：$service"
            logger debug "执行命令: ansible-playbook -e @${ENV_FILE} -t ${service} ${PLAYBOOK_FILE} --extra-vars='state=absent'"
            ansible-playbook -e "@${ENV_FILE}" -t "${service}" "${PLAYBOOK_FILE}" --extra-vars="state=absent"
        done
    else
        logger info "开始卸载服务：$SERVICE_NAME"
        logger debug "执行命令: ansible-playbook -e @${ENV_FILE} -t ${SERVICE_NAME} ${PLAYBOOK_FILE} --extra-vars='state=absent'"
        ansible-playbook -e "@${ENV_FILE}" -t "${SERVICE_NAME}" "${PLAYBOOK_FILE}" --extra-vars="state=absent"
    fi
}

function setup_tab() {
cat > ~/.kansctl_completion.sh << 'EOF'
_kansctl_completions()
{
    local cur prev words cword
    _init_completion || return

    local CMDS="list apply delete setup"
    local ENV_DIR="./moone"
    local SERVICE_DIR="./roles"
    local ENVS
    local SERVICES

    if [[ -d "${ENV_DIR}" ]]; then
        ENVS=$(ls ${ENV_DIR}/*.yml 2>/dev/null | xargs -n1 basename | sed 's/\.yml$//')
    else
        ENVS="prod dev test"
    fi



    if [[ -d "$SERVICE_DIR" ]]; then
        SERVICES=$(find "$SERVICE_DIR" -mindepth 1 -maxdepth 1 -type d -printf "%f\n")
    else
        SERVICES="redis-single postgresql-single mysql-single rabbitmq-single"
    fi
    
    local SETUP_SUB_CMDS="tab"

    if [[ $cword -eq 1 ]]; then
        COMPREPLY=( $(compgen -W "$CMDS" -- "$cur") )
        return
    fi

    if [[ "${words[1]}" == "setup" ]]; then
        if [[ $cword -eq 2 ]]; then
            COMPREPLY=( $(compgen -W "$SETUP_SUB_CMDS" -- "$cur") )
            return
        fi
    fi

    local HAS_E=false
    local HAS_T=false
    for ((i=0; i<${#words[@]}; i++)); do
        [[ "${words[i]}" == "-e" ]] && HAS_E=true
        [[ "${words[i]}" == "-t" ]] && HAS_T=true
    done

    if [[ "${words[1]}" == "apply" || "${words[1]}" == "delete" ]]; then
        if [[ "$HAS_E" != true && "$cur" != -* ]]; then
            COMPREPLY=( $(compgen -W "-e" -- "$cur") )
            return
        fi

        if [[ "$prev" == "-e" ]]; then
            COMPREPLY=( $(compgen -W "$ENVS" -- "$cur") )
            return
        fi

        if [[ "$HAS_E" = true && "$HAS_T" != true ]]; then
            COMPREPLY=( $(compgen -W "-t" -- "$cur") )
            return
        fi

        if [[ "$prev" == "-t" ]]; then
            COMPREPLY=( $(compgen -W "$SERVICES" -- "$cur") )
            return
        fi
    fi
}

complete -F _kansctl_completions ./kansctl
EOF

  logger info  "Tab 补全脚本已写入   ~/.kansctl_completion.sh"
  logger debug "请执行命令立即生效：source ~/.kansctl_completion.sh"
  echo " "
}


function main() {
    [[ "$#" -gt 0 ]] || usage 
    case "$1" in
        (list)
            [[ "$#" -eq 1 ]] || { usage >&2; exit 2; }
            list
            ;; 
        (apply)
            [[ "$#" -gt 2 ]] || { usage >&2; exit 2; }
            apply "${@:2}"
            ;;
        (delete)
            [[ "$#" -gt 2 ]] || { usage >&2; exit 2; }
            delete "${@:2}"
            ;;
        (setup)
            [[ "$2" == "tab" ]] || { usage >&2; exit 2; }
            setup_tab
            ;;
        (*)
            usage
            exit 0
            ;;
    esac
}

main "$@"
